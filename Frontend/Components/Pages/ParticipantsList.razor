@page "/conference/participants"
@rendermode InteractiveServer
@using RESTful.Domain.DTOs
@using RESTful.Domain.Entities
@inject Frontend.Services.ConferenceService ConferenceService

<PageTitle>Участники конференции</PageTitle>

<h2>Участники конференции</h2>

<div class="mb-3">
    <a href="/conference/register" class="btn btn-primary">Зарегистрироваться</a>
</div>

@if (isLoading)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
   <span class="visually-hidden">Загрузка...</span>
 </div>
    </div>
}
else if (!participants.Any())
{
 <div class="alert alert-info" role="alert">
        Пока нет зарегистрированных участников.
    </div>
}
else
{
  <div class="mb-3">
    <label class="form-label">Фильтр по роли:</label>
        <select class="form-select" style="width: auto;" @bind="selectedRole" @bind:after="FilterParticipants">
            <option value="">Все участники</option>
       <option value="@ParticipantRole.Speaker">Докладчики</option>
   <option value="@ParticipantRole.Listener">Слушатели</option>
        </select>
    </div>

    <div class="table-responsive">
      <table class="table table-striped table-hover">
    <thead>
       <tr>
            <th>ФИО</th>
 <th>Место работы</th>
         <th>Степень/Звание</th>
        <th>Роль</th>
   <th>Email</th>
         <th>Телефон</th>
  <th>Действия</th>
    </tr>
            </thead>
          <tbody>
    @foreach (var participant in filteredParticipants)
  {
       <tr>
         <td>@participant.FullName</td>
        <td>@participant.WorkPlace</td>
    <td>
           @if (!string.IsNullOrEmpty(participant.AcademicDegree) || !string.IsNullOrEmpty(participant.AcademicTitle))
        {
             <text>@participant.AcademicDegree @participant.AcademicTitle</text>
}
          else
    {
         <text>-</text>
      }
       </td>
      <td>
<span class="badge @(participant.Role == ParticipantRole.Speaker ? "bg-primary" : "bg-secondary")">
          @(participant.Role == ParticipantRole.Speaker ? "Докладчик" : "Слушатель")
          </span>
         </td>
      <td>@participant.Email</td>
    <td>@participant.Phone</td>
        <td>
  <a href="/conference/participants/@participant.Id" class="btn btn-sm btn-info">Просмотр</a>
      </td>
</tr>
        }
          </tbody>
        </table>
    </div>

    <div class="mt-3">
        <p class="text-muted">Всего участников: @participants.Count (Докладчиков: @participants.Count(p => p.Role == ParticipantRole.Speaker), Слушателей: @participants.Count(p => p.Role == ParticipantRole.Listener))</p>
    </div>
}

@code {
    private List<ParticipantResponseDto> participants = new();
    private List<ParticipantResponseDto> filteredParticipants = new();
    private bool isLoading = true;
    private string selectedRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadParticipants();
    }

  private async Task LoadParticipants()
    {
     isLoading = true;
        participants = await ConferenceService.GetAllParticipantsAsync();
        FilterParticipants();
        isLoading = false;
    }

    private void FilterParticipants()
    {
        if (string.IsNullOrEmpty(selectedRole))
        {
    filteredParticipants = participants;
  }
        else if (Enum.TryParse<ParticipantRole>(selectedRole, out var role))
        {
   filteredParticipants = participants.Where(p => p.Role == role).ToList();
        }
    }
}
